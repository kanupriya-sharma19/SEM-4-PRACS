
Hamilton
#include <stdio.h>
#include <stdbool.h>

int G[5][5] = {
{0, 1, 0, 1, 0},{1, 0, 1, 1, 1},{0, 1, 0, 0, 1},{1, 1, 0, 0, 1},{0, 1, 1, 1, 0}
};
int n = 5;int flag=0;
int x[5] = {0, 0, 0, 0, 0}; 

void place(int k) {
    int j;
    while(1) {
        x[k] = (x[k] + 1) % n;
        if(x[k] == 0)
            return;

        if(G[x[k-1]][x[k]] != 0) {
            for(j = 0; j < k; j++) {
                if(x[j] == x[k])
                    break;
            }
            if(j == k) {
                if(k < n-1 || (k == n-1 && G[x[k]][x[0]] != 0)) {
                    return;
                }
            }
        }
    }
}

void Hamiltonian(int k) {
    while(1) {
        place(k);
        if(x[k] == 0)
            return;

        if(k == n - 1) {flag=1;
            printf("Solution:");
            for(int i = 0; i < n; i++) {
                printf(" %d", x[i]);
            }
            printf(" %d\n", x[0]); 
        } else {
            Hamiltonian(k + 1);
        }
    }
}

int main() {
    x[0] = 0;  
    Hamiltonian(1);
    if(flag==0){
        printf("No solution");
    }
    return 0;
}
