0/1

#include<stdio.h>

int max(int a, int b) {
    return (a > b) ? a : b;
}

int knapsack(int capacity, int weight[], int profit[], int n) {
    int i, j;
    int K[n + 1][capacity + 1];

    for (i = 0; i <= n; i++) {
        for (j = 0; j <= capacity; j++) {
            if (i == 0 || j == 0)
                K[i][j] = 0;
            else if (weight[i - 1] <= j)
                K[i][j] = max(profit[i - 1] + K[i - 1][j - weight[i - 1]], K[i - 1][j]);
            else
                K[i][j] = K[i - 1][j];
        }
    }

    printf("DP Table:\n");
    for(i = 0; i <= n; i++) {
        for(j = 0; j <= capacity; j++) {
            printf("%d ", K[i][j]);
        }
        printf("\n");
    }

    int res = K[n][capacity];
    int w = capacity;
    printf("Items included (0-based index): ");
    for (i = n; i > 0 && res > 0; i--) {
        if (res == K[i - 1][w])
            continue;
        else {
            printf("%d ", i - 1);
            res = res - profit[i - 1];
            w = w - weight[i - 1];
        }
    }
    printf("\n");

    return K[n][capacity];
}

int main() {
    int profit[] = {3,4,6,5};
    int weight[] = {2,3,1,4};
    int capacity = 8;
    int n = sizeof(profit) / sizeof(profit[0]);
    printf("Maximum profit is : %d\n", knapsack(capacity, weight, profit, n));
    return 0;
}


#include <stdio.h>

struct Item {
    int value;
    int weight;
};

void bubbleSort(struct Item items[], int n) {
    for (int i=0; i<n-1; i++) {
        for (int j=i+1; j<n; j++) {
            double ratio1 = (double)items[i].value / items[i].weight;
            double ratio2 = (double)items[j].value / items[j].weight;
            if (ratio1 < ratio2) {
              struct Item temp = items[i];
                items[i] = items[j];
                items[j] = temp;

            }
        }
    }
}

double fractionalKnapsack(int capacity, struct Item items[], int n) {
    bubbleSort(items, n);
    double totalValue = 0.0;
    int currentWeight = 0;

    for (int i = 0; i < n; i++) {
        if (currentWeight + items[i].weight <= capacity) {
            totalValue += items[i].value;
            currentWeight += items[i].weight;
        } else {
            int remainingWeight = capacity - currentWeight;
            totalValue += (double)items[i].value / items[i].weight * remainingWeight;
            break;
        }
    }
    return totalValue;
}

int main() {
    int capacity = 50;
    struct Item items[] = {{60, 10}, {100, 20}, {120, 30}};
    int n = sizeof(items) / sizeof(items[0]);

    double maxValue = fractionalKnapsack(capacity, items, n);
    printf("Maximum value in knapsack = %.2f\n", maxValue);

    return 0;
}
